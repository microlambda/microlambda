service: dataportal-companies

defaultAuthorizer: &defaultAuthorizer
  authorizer:
    name: auth
    type: request
    resultTtlInSeconds: 0

defaultCors: &defaultCors
  cors:
    origins:
      - '*'
    headers:
      - Authorization
      - Content-Type
      - X-Amz-Date
      - X-Amz-Security-Token
      - X-Api-Key
      - X-Impersonate
    allowCredentials: true

provider:
  name: aws
  runtime: nodejs14.x
  region: ${env:AWS_REGION}
  endpointType: regional
  stage: ${env:ENV}
  deploymentBucket:
    name: ${ssm:/dataportal/shared/buckets/deployments}
  deploymentPrefix: ${env:ENV}/companies
  environment:
    env: ${env:ENV}
    MIDDLEWARE_DEFAULT_REGION: ${env:MIDDLEWARE_DEFAULT_REGION}
    MIDDLEWARE_ERROR_QUEUE: https://sqs.${env:MIDDLEWARE_DEFAULT_REGION}.amazonaws.com/${env:AWS_PROJECT_ID}/${env:ENV}DataportalMiddlewareErrors
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - lambda:InvokeFunction
          Resource:
            - arn:aws:lambda:eu-west-1:${env:AWS_PROJECT_ID}:function:${env:MIDDLEWARE_SERVICE_NAME}-${env:ENV}-*
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:DeleteItem
          Resource:
            - arn:aws:dynamodb:${self:provider.region}:${env:AWS_PROJECT_ID}:table/dataportal_${env:ENV}
            - arn:aws:dynamodb:${self:provider.region}:${env:AWS_PROJECT_ID}:table/dataportal_${env:ENV}/index/*
        - ${file(../../../middleware-sqs-permissions.yml)}
        - ${file(../../../streams-permissions.yml)}

functions:
  auth:
    handler: src/handlers/auth.handler
  list:
    handler: src/handlers/http/list.handler
    events:
      - http:
          path: v4/companies
          <<: *defaultAuthorizer
          method: get
          <<: *defaultCors
  get-by-name:
    handler: src/handlers/http/get-by-name.handler
    events:
      - http:
          path: v4/companies/{name}
          <<: *defaultAuthorizer
          method: get
          <<: *defaultCors
  sync-ad-companies:
    handler: src/handlers/routines/sync-ad-companies.handler
    timeout: 900
    events:
      - schedule: rate(1 day)
    alarms:
      - functionErrors
  created:
    handler: src/handlers/events/company-created.handler
    timeout: 900
  updated:
    handler: src/handlers/events/company-updated.handler
    timeout: 900
  removed:
    handler: src/handlers/events/company-removed.handler
    timeout: 900

plugins:
  - serverless-plugin-log-retention
  - serverless-offline
  - serverless-microlambda
  - serverless-dotenv-plugin
  - serverless-prune-plugin
  - serverless-plugin-aws-alerts

resources:
  Resources:
    ApiGatewayRestApi:
      Type: AWS::ApiGateway::RestApi
      Properties:
        MinimumCompressionSize: 1024
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: UNAUTHORIZED
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'

custom:
  alerts:
    stages:
      - prod
      - staging
      - preprod
      - dev
    dashboards: true
    topics:
      alarm: ${self:service}-${self:provider.stage}-alerts-alarm
  logRetentionInDays: 7
  prune:
    automatic: true
    number: 2
  dotenv:
    basePath: ../../../
  microlambda:
    localAuthorizer:
      - replace:
          name: auth
          remove: true
        with:
          arn: arn:aws:lambda:${self:provider.region}:${env:AWS_PROJECT_ID}:function:dataportal-auth-${env:ENV}-auth
          type: request
          resultTtlInSeconds: 0
    domain:
      domainName: ${env:API_DOMAIN_${env:ENV}}
      basePath: companies
